{
  "name": "grunt-jshint2",
  "version": "2.4.4",
  "description": "A JSHint task with caching and asynchonous linting.",
  "main": "index.js",
  "scripts": {
    "test": "grunt"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/jgable/grunt-jshint2.git"
  },
  "keywords": [
    "grunt",
    "gruntplugin",
    "jshint",
    "lint"
  ],
  "author": {
    "name": "Jacob Gable",
    "email": "jacob.gable@gmail.com"
  },
  "license": "MIT",
  "dependencies": {
    "jshint": "2.4.4",
    "cache-swap": "~0.0.6",
    "lodash": "~2.4.1",
    "async": "~0.2.10"
  },
  "devDependencies": {
    "should": "~2.0.2",
    "mocha": "~1.17.0",
    "grunt-simple-mocha": "~0.4.0",
    "grunt": "~0.4.1",
    "grunt-plato": "~0.2.0",
    "ncp": "~0.4.2",
    "xml2js": "~0.2.6",
    "grunt-contrib-concat": "~0.3.0",
    "sinon": "~1.7.2"
  },
  "peerDependencies": {
    "grunt": "~0.4.0"
  },
  "readme": "grunt jshint2 [![Build Status](https://secure.travis-ci.org/jgable/grunt-jshint2.png?branch=master)](http://travis-ci.org/jgable/grunt-jshint2)\n================\n\nThe task I want the [grunt-contrib-jshint](https://github.com/gruntjs/grunt-contrib-jshint) task to be.\n\n### Why another one?\n\nI [offered to merge](https://github.com/gruntjs/grunt-contrib-jshint/issues/45) but they didn't seem interested in saving puppies.\n\n### Options\n\nHere is an example config showing the default options.\n\n```javascript\nvar cfg = {\n\tjshint2: {\n\t\toptions: {\n\t\t\t// A path to your jshintrc file if you'd like to use one\n\t\t\tjshintrc: undefined,\n\t\t\t\n\t\t\t// jshint options to be passed to jshint.lint.\n\t\t\tjshint: {\n\n\t\t\t},\n\t\t\t\n\t\t\t// A list of predefined variables passed to jshint.lint\n\t\t\tglobals: {\n\n\t\t\t},\n\t\t\t\n\t\t\t// What reporter you'd like to use; see Reporters for more info\n\t\t\treporter: \"default\",\n\t\t\t\n\t\t\t// Do not fail task on jshint errors\n\t\t\tforce: false,\n\t\t\t\n\t\t\t// Cache successful files; see Caching for more info\n\t\t\tcache: true,\n\t\t\t\n\t\t\t// Use the 'async' or 'cluster' processor; see Processors for more info\n\t\t\tprocessor: \"async\",\n\t\t\t\n\t\t\t// When using the async processor, the max number of files to process at a time.\n\t\t\tspawnLimit: 5\n\t\t}\n\t}\n};\n```\n\n### Caching\n\nCaching is done by keeping a computed sha1 hash of the file contents, the jshint options (stringified)\nand the globals passed to the jshint.lint function.  \n\n```javascript\n_getContentsHash: function(content) {\n    var sha1 = crypto.createHash('sha1');\n\n    // The hash should include the file contents\n    sha1.update(content);\n\n    // And the jsHintOpts\n    sha1.update(JSON.stringify(this.jsHintOpts));\n\n    // And the globals\n    sha1.update(JSON.stringify(this.globals));\n\n    return sha1.digest(\"hex\");\n}\n```\n\nAfter a file is successfully linted an empty file with a name matching it's computed \nhash is created in a temp directory (using `os.tmpDir()`).  On subsequent jshint calls \nan existence check of the file determines whether we can skip validating it a second time.\n\nBy default, the directory where cached files is stored is dependant on the module version.  So \nupdating the module will invalidate any already cached files.\n\n### Reporters\n\nReporters offer a way to customize the output of the jshint2 task.  Since jshint's \nreporters seem to be in a state of flux at the moment, I've copied their implementations\nover in order to maintain continuity.\n\nA reporter can be specified in three ways\n\n1. string (ie. \"default\" or \"xml\")\n2. class (ie. `require(\"grunt-jshint2\").reporters.xml`)\n3. object with the following interface:\n\n```javascript\n// Reporters interface\nvar myReporter = {\n\tstart: function(files, taskOptions, jsHintOptions) { \n        // The task is starting to process files\n    },\n\n    success: function(filePath, wasCached) {\n        // A file was successfully linted\n    },\n\n    error: function(filePath, errors, data) {\n        // A file had errors\n    },\n\n    finish: function(files) {\t\n    \t// The task is finished processing\n    }\n};\n```\n\nCustom objects will have their `options` attribute set to the task options.  More information available from the `lib/reporterResolver.js` file.\n\n### Processors\n\nA processor takes a list of files, some jshint options and globals and runs jshint on each file. \nThe default processor is an asynchronous processor that reads each file and runs jshint.  Other \nprocessors like the cluster processor can take advantage of multi core machines in order to run \njshint on different threads.\n\nAt this time it's not possible to write your own processor, but here is the interface that each \nprocessor should implement.\n\n```javascript\nfunction MyProcessor(options) {\n\t// Options contains; files, jsHintOpts, globals, cache, spawnLimit\n\tthis.options = options;\n}\n\n_.extend(MyProcessor.prototype, EventEmitter.prototype);\n\n_.extend(MyProcessor.prototype, {\n\tprocessFiles: function() {\n\t\t// Begin processing\n\t\t\n\t\t// Must emit the following events:\n\t\t\n\t\t// On lint success\n\t\tthis.emit(\"success\", filePath, wasCached);\n\t\t// On lint failure\n\t\tthis.emit(\"fail\", filePath, problems, data);\n\t\t// On error\n\t\tthis.emit(\"error\", err);\n\t\t// On finish\n\t\tthis.emit(\"exit\");\n\t}\n});\n```\n\n### License\n\nCopyright 2013, 2014 Jacob Gable, [MIT License](http://opensource.org/licenses/MIT).\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/jgable/grunt-jshint2/issues"
  },
  "_id": "grunt-jshint2@2.4.4",
  "dist": {
    "shasum": "9c8140131c108a356ce9e232cbe265824224483b"
  },
  "_from": "grunt-jshint2@2.4.4",
  "_resolved": "https://registry.npmjs.org/grunt-jshint2/-/grunt-jshint2-2.4.4.tgz"
}
